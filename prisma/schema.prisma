generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(cuid())
  username       String              @unique
  password       String
  name           String
  role           String              @default("EMPLOYEE")
  workShift      String              @default("FULL_TIME")
  recoveryEmail  String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  movements      InventoryMovement[]
  notes          Note[]
  salesOrders    Order[]
  repairOrders   Repair[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String              @id @default(cuid())
  code        String              @unique
  name        String
  description String?
  brand       String?
  model       String?
  categoryId  String
  price       Float
  cost        Float
  stock       Int                 @default(0)
  minStock    Int                 @default(0)
  status      String              @default("ACTIVE")
  imageUrl    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  movements   InventoryMovement[]
  orderItems  OrderItem[]
  category    Category            @relation(fields: [categoryId], references: [id])
  repairParts RepairPart[]
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String   @unique
  address   String?
  taxId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  repairs   Repair[]
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  customerId  String
  userId      String
  status      String      @default("PENDING")
  subtotal    Float
  tax         Float
  discount    Float       @default(0)
  total       Float
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  customer    Customer    @relation(fields: [customerId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Repair {
  id            String                @id @default(cuid())
  repairNumber  String                @unique
  customerId    String
  technicianId  String?
  deviceType    String
  brand         String
  model         String
  serialNumber  String?
  issue         String
  diagnosis     String?
  status        String                @default("UNASSIGNED")
  priority      String                @default("MEDIUM")
  estimatedCost Float?
  finalCost     Float?
  receivedDate  DateTime              @default(now())
  estimatedDate DateTime?
  deliveryDate  DateTime?
  progress      Int                   @default(0)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  purchaseLink  String?
  partsDescription String?
  partsStatus   String?               @default("PENDING")
  estimatedArrival DateTime?
  laborCost     Float?
  partsCost     Float?
  notes         Note[]
  technician    User?                 @relation(fields: [technicianId], references: [id])
  customer      Customer              @relation(fields: [customerId], references: [id])
  parts         RepairPart[]
  statusHistory RepairStatusHistory[]
}

model RepairPart {
  id        String   @id @default(cuid())
  repairId  String
  productId String?
  name      String
  quantity  Int
  price     Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id])
  repair    Repair   @relation(fields: [repairId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(cuid())
  repairId  String
  authorId  String
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  repair    Repair   @relation(fields: [repairId], references: [id], onDelete: Cascade)
}

model RepairStatusHistory {
  id        String   @id @default(cuid())
  repairId  String
  status    String
  comment   String?
  createdAt DateTime @default(now())
  repair    Repair   @relation(fields: [repairId], references: [id], onDelete: Cascade)
}

model InventoryMovement {
  id            String   @id @default(cuid())
  productId     String
  type          String
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  reference     String?
  userId        String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  product       Product  @relation(fields: [productId], references: [id])
}
